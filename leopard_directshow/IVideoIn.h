#pragma once
#include <functional>
class IVideoIn
{

public:

	typedef void(*callback_function)(uint8_t*, uint32_t); // type callback function
	
	virtual ~IVideoIn()
	{
	}

	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////

	virtual bool set_exposure(uint32_t exposureVal)
	{
		return false;
	}

	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////

	virtual bool set_trigger(bool isEnabled)
	{
		return false;
	}

	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////

	virtual uint32_t get_exposure()
	{
		return 0;
	}

	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////

	virtual bool set_gain(uint32_t gain)
	{
		return dshow_.set_gain(gain);
	}

	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////

	virtual long get_gain()
	{
		long gainVal = 0;
		return dshow_.get_gain(&gainVal);

	}

	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////

	std::vector<dshow_graph::device> get_devices_list()
	{
		return dshow_.get_device_list();
	}


	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////

	void setup(std::function<void(uint8_t*, uint32_t)> callback_func)
	{
		dshow_.setup_graph(callback_func);
	}

	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////

	int setup(dshow_graph::device selected)
	{
		status_ = dshow_.setup(selected);
		return status_;
	}

	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////

	void run()
	{
		if (status_ == 0)
		{
			dshow_.render();
			dshow_.run_graph();
		}

	}

	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////

	void print_camera_cap() 
	{
		dshow_.print_camera_cap();
	}

	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////

	dshow_graph::imgFormat get_img_format() const
	{
		return dshow_.get_image_format();
	}

	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////

	void set_callback_c_style(callback_function callback_func)
	{
		dshow_.set_callback(callback_func);
	}

	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////

	void set_callback(std::function<void(uint8_t*, uint32_t)> callback_func)
	{
		dshow_.set_callback(callback_func);
	}

	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////

	void set_format(int capIndex)
	{
		dshow_.set_camera_format(capIndex);
	}

	dshow_graph dshow_;
	int status_;


private:

	
	

};