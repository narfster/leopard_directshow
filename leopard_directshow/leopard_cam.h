#pragma once

#include "IVideoIn.h"
#include "dshow_graph.h"
#include "util_uvc_ext.h"

#include <iostream>
#define LOG_MSG(lvl,msg ) std::cout << msg

class leopard_cam : public IVideoIn
{
public:
	leopard_cam()
	{
		status_ = setup2();
	}

	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////

	void setup(std::function<void(uint8_t*, uint32_t)> callback_func) override
	{
		dshow_.setup_graph(callback_func);
	}

	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////

	int setup2() 
	{
		return dshow_.setup();
	}

	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////

	void run()override{ 
	
		dshow_.render();
		dshow_.run_graph();
	}

	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////

	bool set_exposure(uint32_t exposureVal) override
	{
		int errCode = 0;
		auto pCapFilter = dshow_.getCapFilter();

		uint8_t p_data[2];
		p_data[0] = (uint8_t)(exposureVal);
		p_data[1] = (uint8_t)(exposureVal >> 8);

		ULONG p_result[10] = { 0 };

		errCode = util_uvc_ext::write_to_uvc_extension(pCapFilter, 0x06, p_data, 2, p_result);

		LOG_MSG(trace, "exposrue set to: " << exposureVal << std::endl);

		return errCode;
	}

	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////

	bool set_trigger(bool isEnabled) override
	{
		int errCode = 0;
		auto pCapFilter = dshow_.getCapFilter();

		uint8_t p_data[2];
		if(isEnabled == true)
		{
			p_data[0] = (uint8_t)(0x03);
		}
		else
		{
			p_data[0] = (uint8_t)(0x00);
		}
		
		p_data[1] = (uint8_t)(0x00);

		ULONG p_result[10] = { 0 };
		errCode = util_uvc_ext::write_to_uvc_extension(pCapFilter, 0x0b, p_data, 2, p_result);
		if(errCode == 0)
		{
			LOG_MSG(trace, "camera trigger = " << isEnabled << std::endl);
		}
		else
		{
			LOG_MSG(trace, "ERROR: set camera trigger" << std::endl);
		}
		
		return errCode;
	}

	
	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////

	uint32_t get_exposure() override
	{
		return 0;
	}
	
	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////

	bool set_gain(uint32_t gain) override
	{
		return false;
	}

	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////

	uint32_t get_gain() override
	{
		return 0;
	}

	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////

	void print_camera_cap() override
	{
		dshow_.print_camera_cap();
	}

	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////

	dshow_graph::imgFormat get_img_format() const
	{
		return dshow_.get_image_format();
	}

	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////

	void set_callback(std::function<void(uint8_t*, uint32_t)> callback_func)
	{
		dshow_.set_callback(callback_func);
	}

	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////

	void set_format(int capIndex)
	{
		dshow_.set_camera_format(capIndex);
	}

	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////
	
	int get_device_status() const
	{
		return status_;
	}

	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////


private:

	  dshow_graph dshow_;
	  int status_;
};
